openapi: "3.0.0"
info:
  description: |
    This server is designed to expose virtually all of the APIs that ElectrumSV depends on
    under one roof. The full set of APIs are divided into sub-groupings, each containing
    one or more endpoints.
  version: 1.0.1
  title: ElectrumSV Server
  license:
    name: Open BSV License version 4

paths:

  # ACCOUNT MANAGEMENT AND PAYMENT CHANNEL APIs

  /api/v1/endpoints:
    get:
      summary: Show available endpoints
      security: []  # no auth required
      tags:
        - Endpoint Discovery
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiType:
                    type: integer
                  apiVersion:
                    type: string
                  baseUrl:
                    type: string
                  timestamp:
                    type: string
                  expiryTime:
                    type: string
                  endpoints:
                    type: array
                    items:
                      type: object
                      properties:
                        apiType:
                          type: string
                        apiVersion:
                          type: integer
                        baseUrl:
                          type: string
                    example:
                      - apiType: bsvapi.account
                        apiVersion: 1
                        baseUrl: /api/v1/account

                      - apiType: bsvapi.channel,
                        apiVersion: 1
                        baseUrl: /api/v1/channel

                      - apiType: bsvapi.websocket,
                        apiVersion: 1
                        baseUrl: /api/v1/web-socket


  /api/v1/account:
    get:
      summary: Get account details
      description: This currently serves as a way for an account owner to determine if they have
        an account with the service, and what the API key is. The client can provide the same request
        body used in the registration endpoint and either get an unauthorized response if there is
        no account (or it is disabled) or if there is an account their API key data.
      security:
        - BearerAuth: [ ]
      tags:
        - Account Management and Authorization
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKeyResponse"
        '400':
          description: Invalid API key type or no body with client key data.
        '401':
          description: Unauthorized - An API key was provided and it was invalid

  /api/v1/account/register:
    post:
      summary: Create an account for the given identity public key.
      security:
        - BearerAuth: [ ]
      description: |
        Attempt to create a new account for the given identity public key. If the account alread
        exists this will return the current API key for that account. If it does not, then a new account
        will be created and the API key for it returned.
      tags:
        - Account Management and Authorization
      requestBody:
        description: |
          This is both the identity public key of the client and a signed message with that key, intended
          to prove that the client is the owner of the matching private key. The signed message should
          be the full URL of this endpoint (using the external domain name) combined with the current UTC
          date, for instance "https://x.bitcoinsv.io/api/v1/account/register 2023-04-20T23:41:53.708982".
          We do not currently check these values are correct, but will do so in future. They are intended
          to ensure that access to an account cannot be gained by replaying the request body. For regtest
          this the domain name will most commonly be the localhost IP address and port the local reference
          server instance is running on.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                public_key_hex:
                  type: string
                signature_hex:
                  type: string
                message_hex:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKeyResponse"
        '400':
          description: Invalid API key type or no body with client key data.
        '401':
          description: Unauthorized - An API key was provided and it was invalid or the client key data was
            not valid.

  # General Websocket
  /api/v1/web-socket:
    parameters:
      - name: token
        in: query
        required: true
        description: The master bearer token
        schema:
          type: string
          default: t80Dp_dIk1kqkHK3P9R5cpDf67JfmNixNscexEYG0_xaCbYXKGNm4V_2HKr68ES5bytZ8F19IS0XbJlq41accQ==
    get:
      summary: General-purpose websocket
      description: |
        Subscribe to all websocket notifications for an account
        i.e. includes all peer channels associated with the overarching account.

        Authentication is via the query parameter ?token="master bearer token" and must
        be the master bearer token for the account.

        Authentication is not performed via http headers as this would not be compatible
        with javascript and browser clients.

        At present these notification types are supported:

        Chain tip notifications
        - message_type: bsv.api.headers.tip
        - result: Chain tip (see /api/v1/headers/tips endpoint for json structure)

        Peer Channels notifications
        - message_type: bsv.api.channels.notification
        - result: Peer channel notification (example below)

      security: []
      tags:
        - General Websocket
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralNotification"


  # Peer Channels APIs

  /api/v1/channel/manage/list:
    get:
      summary: List all Peer Channels
      security:
        - BearerAuth: [ ]
      tags:
        - Peer Channels - Channel Management APIs
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channels"

  /api/v1/channel/manage/{channelid}:
    parameters:
      - name: channelid
        in: path
        required: true
        description: The url safe, base64 encoded external channel id
        schema:
          type: string
          format: url_safe_base64
    get:
      summary: Get single channel details
      security:
        - BearerAuth: [ ]
      tags:
        - Peer Channels - Channel Management APIs
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"

    post:
      summary: Update single channel details
      security:
        - BearerAuth: [ ]
      tags:
        - Peer Channels - Channel Management APIs
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelAmended"

    delete:
      summary: Delete a channel
      security:
        - BearerAuth: [ ]
      tags:
        - Peer Channels - Channel Management APIs
      responses:
        '200':
          description: Success

  /api/v1/channel/manage/:
    post:
      summary: Create a new Peer Channel
      security:
        - BearerAuth: [ ]
      tags:
        - Peer Channels - Channel Management APIs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateChannelRequest"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"

  /api/v1/channel/manage/{channelid}/api-token/{tokenid}:
    parameters:
      - name: channelid
        in: path
        required: true
        description: The url safe, base64 encoded external channel id
        schema:
          type: string
          format: url_safe_base64
      - name: tokenid
        in: path
        required: true
        description: The url safe, base64 encoded API Bearer token for the selected channel
        schema:
          type: string
    get:
      summary: Get token details
      security:
        - BearerAuth: [ ]
      tags:
        - Peer Channels - Token Management APIs
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessToken"

    delete:
      summary: Revoke selected token
      security:
        - BearerAuth: [ ]
      tags:
        - Peer Channels - Token Management APIs
      responses:
        '200':
          description: Success

  /api/v1/channel/manage/{channelid}/api-token:
    parameters:
      - name: channelid
        in: path
        required: true
        description: The url safe, base64 encoded external channel id
        schema:
          type: string
          format: url_safe_base64
    get:
      parameters:
        - name: token
          in: query
          required: false
          description: Optional filter for searching certain token
          schema:
            type: string
      summary: Get a list of tokens for the selected channel
      security:
        - BearerAuth: [ ]
      tags:
        - Peer Channels - Token Management APIs
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokens"

    post:
      summary: Create a new token for the selected channel
      security:
        - BearerAuth: [ ]
      tags:
        - Peer Channels - Token Management APIs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccessTokenRequest"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessToken"

  /api/v1/channel/{channelid}:
    parameters:
      - name: channelid
        in: path
        required: true
        description: The url safe, base64 encoded external channel id
        schema:
          type: string
          format: url_safe_base64
    post:
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
          description: For example 'application/octet-stream' or 'application/json'
          required: true
      summary: Write message to channel
      security:
        - BearerAuth: [ ]
      tags:
        - Peer Channels - Message management APIs
      description: |
        The payload is always written in the request body in
        binary encoded format but the 'Content-Type' header
        instructs the recient how to decode the message.
      requestBody:
        content:
            application/json:
              schema:
                type: object
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

    head:
      summary: Get max sequence number of channel
      description: |
        Get max sequence number of channel. The max sequence number is returned in the response
        header's 'ETag' key.
      security:
        - BearerAuth: [ ]
      tags:
        - Peer Channels - Message management APIs
      responses:
        '200':
          description: Success
          headers:
            ETag:
              schema:
                type: integer
              description: Max Sequence.

    get:
      parameters:
        - in: query
          name: unread
          schema:
            type: boolean
          required: false
      summary: Get messages from channel
      security:
        - BearerAuth: [ ]
      tags:
        - Peer Channels - Message management APIs
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"

  /api/v1/channel/{channelid}/{sequence}:
    parameters:
      - name: channelid
        in: path
        required: true
        description: The url safe, base64 encoded external channel id
        schema:
          type: string
          format: url_safe_base64
      - name: sequence
        in: path
        required: true
        description: The sequence number of the message of interest
        schema:
          type: integer
    post:
      parameters:
        - in: query
          name: older
          schema:
            type: boolean
          required: false
          description: Optional parameter to mark also all older messages
      summary: Mark messages as read or unread
      security:
        - BearerAuth: [ ]
      tags:
        - Peer Channels - Message management APIs
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                read:
                  type: boolean
      responses:
        '200':
          description: Success

    delete:
      summary: Delete messages from channel
      security:
        - BearerAuth: [ ]
      tags:
        - Peer Channels - Message management APIs
      responses:
        '200':
          description: Success

  /api/v1/channel/{channelid}/notify:
    parameters:
      - name: channelid
        in: path
        required: true
        description: The url safe, base64 encoded external channel id
        schema:
          type: string
    get:
      summary: Subscribe to websocket notifications for new messages
      security: [ ]
      tags:
        - Peer Channels - Websocket API
      responses:
        '200':
          description: Subscribe to websocket notifications for new messages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

  # HEADER SV APIs

  /api/v1/headers/{hash}:
    parameters:
      - name: hash
        in: path
        required: true
        description: The hex encoded block hash
        schema:
          type: string
          format: hex
    get:
      summary: Get a single raw block header
      security: []  # no auth required
      tags:
        - HeaderSV APIs
      responses:
        '200':
          description: Get a single raw block header
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                default: <a single raw block header>  (application/octet-stream bytes)
            application/json:
              schema:
                $ref: "#/components/schemas/Header"
        '400':
          description: hash path parameter not supplied
        '404':
          description: Not Found (the header with this block hash was not found)

  /api/v1/headers/by-height:
    get:
      summary: Get a batch of headers by height & count
      security: []  # no auth required
      parameters:
        - name: height
          in: query
          required: true
          description: The starting height of the first block to return in the batch
          schema:
            type: integer
            default: 0
        - name: count
          in: query
          required: false
          description: The number of blocks to return in the batch (max of 2000). Default=1
          schema:
            type: integer
            default: 1
            maximum: 2000
      tags:
        - HeaderSV APIs
      responses:
        '200':
          description: Get a batch of raw block headers i.e. an array of 80 byte headers
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                default: <raw block headers array>  (application/octet-stream bytes)
            application/json:
              schema:
                $ref: "#/components/schemas/Headers"
        '400':
          description: hash path parameter not supplied
        '401':
          description: Unauthorized Bearer Token
        '404':
          description: Not Found (the header with this block hash was not found)
        '503':
          description: Service Unavailable - means the Header SV instance running in the backend is
            is offline.

  /api/v1/headers/tips:
    get:
      summary: Get chain tips
      security: []  # no auth required
      tags:
        - HeaderSV APIs
      responses:
        '200':
          description: Get chain tips
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tips"

  /api/v1/headers/tips/websocket:
    get:
      summary: Headers websocket
      security: []  # no auth required
      tags:
        - HeaderSV APIs
      responses:
        '200':
          description: |
            Subscribe to websocket notifications of the new chain tip.
            See below for binary struct format
            DELETE THIS ENDPOINT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TipBinary"


# Indexer APIs (optional if service runs an indexer)

  /api/v1/restoration/search:
    post:
      tags:
      - Indexer
      summary: "Search for usage of these pushdata hashes in the restoration index"
      security:
        - BearerAuth: [ ]
      requestBody:
        description: "Pushdata hashes to look for usage of"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestorationRequestJSON"
          application/octet-stream:
            schema:
              $ref: "#/components/schemas/RestorationRequestBinary"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestorationResponseJSON"
            application/octet-stream:
              schema:
                type: object
                properties:
                  key:
                    type: string
                    format: binary
                    default: <key> (application/octet-stream bytes)
                  api-key:
                    type: string
                    format: binary
                    default: <api-key> (application/octet-stream bytes)
        '400':
          description: Invalid API key type or empty request body.

  /api/v1/indexer:
    get:
      summary: Get indexer settings for the account associated with the bearer token.
      description: |
        At this time this is only used to put in place a tip filter callback URL where matches for registered tip filter pushdata hashes are delivered.

          Messages posted to the callback URL are of the structure:

          ```
          {
            "blockId": "0000000000000000021f7fa2c33c4e36f040acfeda8cc1fd1ba24581b3988da9",
            "matches": [
                "pushDataHashHex": "f33c760e5b0b1a48e95bf4d83bb7d2315ac733770572c78c81b98b83e48bc818",
                "transactionId": "99df8472e2f7e3f5966d8c277b776c6f31fec5f5653de1c2ea4c4f9d97c9848b",
                "transactionIndex": 0,
                "flags": 1,
            ]
          }
          ```

          Notes:


          * The block id is the canonically encoded hexadecimal representation of the block hash. If the matches are in the mempool, then it will be `null`.
          * Flags indicate if the match is in a transaction input or output, `1 << 0` is in an output script, `1 << 1` is in an input script.
      security:
        - BearerAuth: [ ]
      tags:
        - Indexer
      responses:
        '200':
          description: Success. Returns the current indexer settings.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexerSettingsJSON"
        '400':
          description: Invalid API key type or empty request body.
        '404':
          description: No stored settings for your account.
        '503':
          description: Indexer services are currently inaccessible.
    post:
      tags:
      - Indexer
      summary: "Update the specific provided indexer settings and return the full current set."
      security:
        - BearerAuth: [ ]
      requestBody:
        description: "The outpoints to look for usage of."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndexerSettingsJSON"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndexerSettingsJSON"
        '400':
          description: Invalid API key type or empty request body.
        '503':
          description: Indexer services are currently inaccessible.

  /api/v1/transaction/{txid}:
    parameters:
      - name: txid
        in: path
        required: true
        description: The canonically hex encoded transaction hash
        schema:
          type: string
          format: hex
    get:
      summary: Get transaction data for a single transaction.
      security:
        - BearerAuth: [ ]
      tags:
        - Indexer
      responses:
        '200':
          description: Get a single transaction.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                default: The raw bytes for the requested transaction.
            application/json:
              schema:
                type: string
                format: hex
                description: The hex-encoded transaction byte data.
        '400':
          description: The `txid` value was invalid.
        '404':
          description: The server does not have or know about the given transaction.
        '503':
          description: Indexer services are currently inaccessible.

  /api/v1/merkle-proof/{txid}:
    get:
      summary: Get the merkle proof for a single transaction.
      security:
        - BearerAuth: [ ]
      tags:
        - Indexer
      parameters:
        - name: txid
          in: path
          required: true
          description: The canonically hex encoded transaction hash
          schema:
            type: string
            format: hex
        - name: targetType
          in: query
          required: false
          description: The canonically hex encoded transaction hash
          schema:
            type: string
            default: hash
            enum:
              - hash
              - merkleRoot
              - header
      responses:
        '200':
          description: Get a single merkle proof.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                default: The binary encoded merkle proof as per the TSC standard.
            application/json:
              schema:
                type: string
                format: TSC JSON-encoded merkle proof
        '400':
          description: The `txid` value was invalid.
        '404':
          description: The server does not have or know about the given transaction.
        '503':
          description: Indexer services are currently inaccessible.

  /api/v1/transaction/filter:
    get:
      summary: Get the currently registered pushdata hashes for tip filtering.
      description: >-
        What pushdata hashes are being filtered for, from what date and how long each the filter for each is in place.
      security:
        - BearerAuth: [ ]
      tags:
        - Indexer
      responses:
        '200':
          description: Get the current tip filter registrations.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                default: Packed lump of consecutive 40 byte chunks each comprised of the registered pushdata hash (32 bytes), the date created (4 bytes big endian) and the date expires (4 bytes big endian).
            application/json:
              schema:
                $ref: '#/components/schemas/TipFilterListResponseJSON'
        '400':
          description: Unsupported content type.
        '401':
          description: Invalid or missing API key type.
        '503':
          description: Indexer services are currently inaccessible.
    post:
      tags:
      - Indexer
      summary: "Create new pushdata filter registrations with the service"
      description: |
        If an application wants to know about the appearance of some data or a payment on the blockchain, it will request the indexer track pushdata hashes to monitor for a given duration. A pushdata hash is the SHA256 hash of either a public key or a public key hash. This indexer accepts durations from 5 minutes to 7 days in length.


        The indexer processes all new transactions and blocks, and batches matches in either input or output scripts to deliver to registered applications as an HTTP callback. The HTTP callback and the structure of the callback is currently specified within the indexer settings of this specification (see GET /api/v1/indexer).


        Example use cases (in order of relevance):

        * A wallet user is soliciting a payment from another party. The wallet generates a new key and then registers it successfully with the indexer. The user is then shown a payment URL which includes both expiry date, payment destination including the key and the requested amount. They give this to the other party who can broadcast a payment transaction and know that the wallet user will receive it.

        * A wallet wants to communicate with one or more other parties on the blockchain. It can use a public key or sequence of non-reused public keys to hear about new occurrences of related transactions, as long as it has registered the key usage ahead of time.
      security:
        - BearerAuth: [ ]
      requestBody:
        description: "The desired filter registrations to create."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TipFilterRegistrationRequestJSON"
          application/octet-stream:
            schema:
              $ref: "#/components/schemas/TipFilterRegistrationRequestBinary"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TipFilterRegistrationResponseJSON"
              example:
                {
                  dateCreated: 1679951723
                }
        '400':
          description: Invalid API key type or empty request body.
        '401':
          description: Invalid or missing API key type.
        '503':
          description: Indexer services are currently inaccessible.

  /api/v1/transaction/filter:delete:
    post:
      tags:
      - Indexer
      summary: Remove these tip filter registrations.
      description: |
        Remove the filters for the specified pushdata hashes.

          This is a batch operation and it is assumed that the application knows what it is doing. All the
          pushdata hashes must be present and removed or none are removed.
      security:
        - BearerAuth: [ ]
      requestBody:
        description: "The desired filter registrations to remove."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TipFilterDeletionRequestJSON"
          application/octet-stream:
            schema:
              $ref: "#/components/schemas/TipFilterDeletionRequestBinary"
      responses:
        '200':
          description: Successful deletion.
        '400':
          description: Invalid API key type, empty request body, unparseable data, one or more invalid deletion hashes.
        '401':
          description: Invalid or missing API key type.
        '503':
          description: Indexer services are currently inaccessible.

  /api/v1/output-spend:
    post:
      tags:
      - Indexer
      summary: "Query the state of the specified outputs in the mempool and mined transactions"
      description: |
        Provides a way to get the current state of the specified outputs. Any that are unknown will not have an entry in the response. Any that are known will have an entry in the response. The response will indicate what they were spent by, and whether it is in the mempool or a block on the indexer's preferred chain fork.

          It is not necessary to use this before registering for notifications about updates to the outputs as the act of registering for notifications returns the current state.
      security:
        - BearerAuth: [ ]
      requestBody:
        description: "The outpoints to query for usage of."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OutputSpendRequestJSON"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutputSpendResponseJSON"
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid API key type or empty request body.
        '503':
          description: Indexer services are currently inaccessible.

  /api/v1/output-spend/notifications:
    post:
      tags:
      - Indexer
      summary: Register for notifcations about  these outputs in the mempool and mined transactions.
      description: >
        This endpoint requires that the application making the registrations currently has an active web socket connection. The registrations will last for the lifetime of the web socket and will have to be reestablished on reconnection.

          The indexer will watch for spends of the outputs in new transactions and in new blocks on the indexer's preferred fork, and will post notifications on the web socket to connected applications for those outputs.

          A successful registration will return any existing spend of any of the specified outputs.
      security:
        - BearerAuth: [ ]
      requestBody:
        description: "The outpoints to monitor for changes."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OutputSpendRequestJSON"
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: The binary encoded list of outpoints.
      responses:
        '200':
          description: The account is known to be connected to the account web socket. The response includes the located usages for the given outpoints. And registrations are put in place so that the web socket is notified if there are any new changes.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OutputSpendResponseJSON"
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: The binary encoded list of spend metadata.
        '400':
          description: Invalid API key type or empty request body.
        '503':
          description: Indexer services are currently inaccessible.

  /api/v1/output-spend/notifications:unregister:
    post:
      tags:
      - Indexer
      summary: Unregister for notifcations about  these outputs in the mempool and mined transactions.
      security:
        - BearerAuth: [ ]
      requestBody:
        description: The outpoints to unregister from. If there is one outpoint and it is a null outpoint (zeroed hash and zero index) all registrations for this account are removed.
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: The binary encoded list of outpoints.
      responses:
        '200':
          description: The account is known to be connected to the account web socket. The response includes the located usages for the given outpoints. And registrations are put in place so that the web socket is notified if there are any new changes.
        '400':
          description: Invalid API key type, empty request body or unparseable data.
        '503':
          description: Indexer services are currently inaccessible.

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: url_safe bas64

  schemas:
    NotImplementedYet:
      type: string
      default: "response body documentation not added yet"
    CreateChannelRequest:
      type: object
      properties:
        public_read:
          type: boolean
        public_write:
          type: boolean
        sequenced:
          type: boolean
        retention:
          $ref: "#/components/schemas/Retention"
    ChannelAmended:
      type: object
      properties:
        public_read:
          type: boolean
        public_write:
          type: boolean
        locked:
          type: boolean
    Channel:
      type: object
      properties:
        id:
          type: string
        href:
          type: string
        public_read:
          type: boolean
        public_write:
          type: boolean
        sequenced:
          type: boolean
        locked:
          type: boolean
        head:
          type: integer
        retention:
          $ref: "#/components/schemas/Retention"
        access_tokens:
          $ref: "#/components/schemas/AccessTokens"
    Retention:
      type: object
      properties:
        min_age_days:
          type: integer
        max_age_days:
          type: integer
        auto_prune:
          type: boolean
    CreateAccessTokenRequest:
      type: object
      properties:
        description:
          type: string
          minLength: 0
          maxLength: 1024
        can_read:
          type: boolean
        can_write:
          type: boolean
    AccessTokens:
      type: array
      items:
        $ref: "#/components/schemas/AccessToken"
    AccessToken:
      type: object
      properties:
        id:
          type: integer
        token:
          type: string
        description:
          type: string
        can_read:
          type: boolean
        can_write:
          type: boolean
    APIKeyResponse:
      type: object
      properties:
        public_key_hex:
          type: string
        api_key:
          type: string
    Channels:
      type: object
      properties:
        channels:
          type: array
          items:
            $ref: "#/components/schemas/Channel"
    GeneralNotification:
      type: object
      properties:
        message_type:
          type: string
        result:
          type: object
      example:
        message_type: "bsv.api.channels.notification"
        result:
          id: HwFd6t4R3qzCMvVqUz6beTf_RJScKOBtFBZaiciZYoPVAaWrJ95_Umr61OdVkYaSj8kjH5PNMy2PMDinGf8-MA==
          notification: New message arrived
    TipBinary:
      type: string
      format: binary
      default: 80 byte header + 4 byte uint32 height (application/octet-stream bytes)
    Tip:
      type: object
      properties:
        header:
          $ref: "#/components/schemas/Header"
        state:
          type: string
        chainWork:
          type: integer
        height:
          type: integer
    Tips:
      type: array
      items:
        $ref: "#/components/schemas/Tip"
    Message:
      type: object
      properties:
        sequence:
          type: integer
        received:
          type: string
          format: date-time
        content_type:
          type: string
        payload:
          type: string
    Header:
      type: object
      properties:
        hash:
          type: string
        version:
          type: integer
        prevBlockHash:
          type: string
        merkleRoot:
          type: string
        creationTimestamp:
          type: integer
        difficultyTarget:
          type: integer
        nonce:
          type: integer
        transactionCount:
          type: integer
        work:
          type: integer
    Headers:
      type: array
      items:
        $ref: "#/components/schemas/Header"
    Peer:
      type: object
      properties:
        ip:
          type: string
        port:
          type: integer
    Peers:
      type: array
      items:
        $ref: "#/components/schemas/Peer"
    PushdataHashes:
      type: array
      items:
        type: string
    RestorationRequestJSON:
      type: object
      properties:
        filterKeys:
          $ref: "#/components/schemas/PushdataHashes"
    RestorationRequestBinary:
      # TODO This is not displayed.
      type: object
      properties:
        filterKeys:
          $ref: "#/components/schemas/PushdataHashes"
    RestorationResponseJSON:
      type: object
      properties:
        pushDataHashHex:
          type: string
        lockingTransactionId:
          type: string
        lockingTransactionIndex:
          type: string
        unlockingTransactionId:
          type: string
        unlockingInputIndex:
          type: string
        flags:
          type: integer
    TipFilterDeletionRequestJSON:
      type: array
      items:
        type: string
        example: "5b4233bd7143494258bd10779fd4a1fff8785431da75a892bb310bbc0289e45b"
      description: >-
        An array of pushdata hashes to remove the registrations for.
    TipFilterDeletionRequestBinary:
      type: array
      items:
        type: string
        format: binary
        example: 5b4233bd7143494258bd10779fd4a1fff8785431da75a892bb310bbc0289e45b
      description: >-
        An array of pushdata hashes to remove the registrations for.
    TipFilterRegistrationRequestJSON:
      type: array
      items:
        type: array
        items:
          oneOf:
            - type: string
              example: "5b4233bd7143494258bd10779fd4a1fff8785431da75a892bb310bbc0289e45b"
            - type: integer
              example: 300
        description: >-
          An array of filter entries to register. Each entry is an array containing a hex-encoded pushdata hash and a duration in seconds (must be at least 5 minutes and at most 7 days).
    TipFilterRegistrationRequestBinary:
      type: array
      items:
        type: array
        items:
          oneOf:
            - type: string
              format: binary
              example: 5b4233bd7143494258bd10779fd4a1fff8785431da75a892bb310bbc0289e45b
            - type: string
              format: binary
              example: 0000012c
        description: >-
          An array of filter entries to register. Each entry is an array containing a 32-byte pushdata hash and a duration in seconds (must be at least 5 minutes and at most 7 days).
    TipFilterRegistrationResponseJSON:
      type: object
      properties:
        dateCreated:
          type: integer
    TipFilterListResponseJSON:
      type: array
      items:
        type: array
        items:
          oneOf:
            - type: string
              example: "5b4233bd7143494258bd10779fd4a1fff8785431da75a892bb310bbc0289e45b"
            - type: integer
              example: 1679949180
            - type: integer
              example: 5
        description: >-
          An array of registered filter entries. Each entry is an array containing a 32-byte pushdata hash, a date of creation and a duration in seconds.
    OutputSpendRequestJSON:
      type: array
      items:
        type: array
        items:
          oneOf:
            - type: string
              example: "004233bd7143494258bd10779fd4a1fff8785431da75a892bb310bbc0289e45b"
            - type: integer
              example: 5
        description: >-
          The first item in the array MUST be an string representing the canonically hex-encoded transaction id,
          and the second item MUST be a integer representing the index of the transaction output.
    OutputSpendResponseJSON:
      type: array
      items:
        type: array
        items:
          oneOf:
            - type: string
              example: "004233bd7143494258bd10779fd4a1fff8785431da75a892bb310bbc0289e45b"
            - type: integer
              example: 5
            - type: string
              example: "0120eae6dc11459fe79fbad26f998f4f8c5b75fa6f0fff5b0beca4f35ea7d721"
            - type: integer
              example: 0
            - type: string
              example: "0000000000000000021f7fa2c33c4e36f040acfeda8cc1fd1ba24581b3988da9"
        minItems: 5
        maxItems: 5
        description: >-
          The first two items in the array MUST be a string and then an integer, representing the
          canonically hex-encoded transaction id and transaction output index of the monitored
          outpoint. The next two items in the array MUST be a string and then an integer,
          representing the canonically hex-encoded transaction id and transaction input index of
          the spending input. The fifth and last item is optional and should be the canonically
          hex-encoded block hash or null, depending if the spending transaction is currently
          known to be in a block or in the mempool with respect to the indexer's favoured chain
          fork.
    IndexerSettingsJSON:
      type: object
      properties:
        tipFilterCallbackUrl:
          type: string
